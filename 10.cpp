// Write a program in C or C++ to generate machine code from the abstract syntax
// tree generated by the parser.

#include <iostream>
#include <stack>
using namespace std;

// Node structure for the Abstract Syntax Tree (AST)
struct Node {
    char data;
    Node* left;
    Node* right;
};

// Function to create a new node
Node* createNode(char data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->left = newNode->right = nullptr;
    return newNode;
}

// Function to generate machine code from AST and return the result
int generateMachineCode(Node* root) {
    stack<int> machineStack;
    if (root) {
        int leftResult = generateMachineCode(root->left);
        int rightResult = generateMachineCode(root->right);
        switch (root->data) {
            case '+':
                return leftResult + rightResult;
            case '-':
                return leftResult - rightResult;
            case '*':
                return leftResult * rightResult;
            case '/':
                return leftResult / rightResult;
            default:
                return root->data - '0'; // Convert character to integer
        }
    }
    return 0; // Return 0 if root is null
}

int main() {
    // Example AST
    Node* root = createNode('+');
    root->left = createNode('3');
    root->right = createNode('*');
    root->right->left = createNode('4');
    root->right->right = createNode('5');

    // Generate machine code and get result
    int result = generateMachineCode(root);

    // Output result
    cout << "Result: " << result << endl;

    return 0;
}
